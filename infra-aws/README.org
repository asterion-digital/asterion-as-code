#+TITLE: Asterion infrastructure deployment
#+AUTHOR: James Blair, Shawn Gerrard, Daljit Singh
#+DATE: <2022-03-12 Sat>


This repository captures the end to end workflow for deploying asterion digital infrastructure via [[https://www.pulumi.com/][pulumi]].


* Setup environment

To get started lets initialise our project, making sure we are in the right directory, have the python [[https://docs.python.org/3/library/venv.html][virtual environment]] activated, and have installed our python dependencies with [[https://pypi.org/project/pip/][pip]].

#+NAME: Setup environment
#+begin_src tmate
# Start from the infra directory and initialise
cd infra-aws && pulumi stack init asterion-digital/dev

# Create virtual environment
python3 -m venv venv

# Activate virtual environment
source venv/bin/activate

# Install pip requirements
pip install -r requirements.txt
#+end_src


* Create configuration

Once our local environment is set up we can proceed with creating the required configuration entries in pulumi. For now this is just a local [[https://www.ssh.com/academy/ssh][ssh]] key.

This is the key that will be added to the infrastructure virtual machines so ensure you update the ~$keyname~ variable as appropriate!

Note: If you need to generate a new key you can run ~ssh-keygen -t rsa -b 4096 -C <comment>~.

#+NAME: Create required pulumi configuration
#+begin_src tmate
export keyname="asterion"
cat ~/.ssh/${keyname}.pub | pulumi config set publickey
cat ~/.ssh/${keyname}     | pulumi config set --secret privatekey
echo "ap-southeast-2"     | pulumi config set aws:region
#+end_src

If you didn't install AWS CLI as per previous instructions, you will need to configure pulumi with a [[https://www.pulumi.com/registry/packages/aws/installation-configuration/][few more details]].


You will need to add the following secrets into your Github repository to ensure the Github CI/CD pipelines can run as expected. 

Note: You will need Github and AWS CLI's installed to perform the commands below. If you don't have Github CLI, you can use the [[https://github.com][Github UI]] to add this configuration manually.

#+NAME: Export required pulumi configuration to Github
#+begin_src tmate
gh secret set AWS_ACCESS_KEY_ID
cat ~/.ssh/${keyname}     | gh secret set AWS_PRIVATE_KEY
cat ~/.ssh/${keyname}.pub | gh secret set AWS_PUBLIC_KEY
echo "ap-southeast-2"     | gh secret set AWS_REGION
gh secret set AWS_SECRET_ACCESS_KEY
#+end_src




* Create stack and retrieve kubeconfig

Once we have our local pulumi configuration set we can bring up the infrastructure stack.

Currently this stack includes a full stack of dedicated networking in amazon web services, with an arm cpu architecture [[https://aws.amazon.com/ec2/graviton/][ec2 virtual machine]] running [[https://k3s.io/k3s][k3s]].

#+NAME: Bring the stack up
#+begin_src tmate
pulumi up --yes
#+end_src


With our stack now running, lets retrieve the [[https://rancher.com/docs/rke/latest/en/kubeconfig/][k3s kubeconfig]] file and set this up in our local ~infra~ directory so that we can interact with the infrastructure later on to deploy applications.

#+NAME: Retrieving kubeconfig
#+begin_src tmate
# Output kubeconfig to file
pulumi stack output "Infra server kubeconfig" > asterion-infra-kubeconfig

# Sed replace the kubeconfig ip
ip=$(pulumi stack output "Infra server public ip")
sed -i "s/127.0.0.1/${ip}/g" asterion-infra-kubeconfig
#+end_src


Asterion infrastructure has now been deployed! ðŸš€


* Teardown stack

Need to make it all go away ðŸ˜…?  No problem, run the following to completely teardown this stack.

#+NAME: Teardown down the pulumi stack
#+begin_src tmate
pulumi destroy --yes
#+end_src
